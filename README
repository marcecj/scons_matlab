An SCons Tool for Matlab
========================
Marc Joliet <marcec@gmx.de>

Introduction
------------

`matlab.py` is an SCons extension (more precisely, a tool) for compiling Mex
extensions and programs that call to the Matlab engine.  It adds a 'MATLAB'
`dict` to your build systems env that contains potentially interesting
information, e.g., you can get Matlabs library directory via
env["MATLAB"]["LIB_DIR"].  More importantly, it defines a Mex() pseudo-builder
that wraps the SharedLibrary builder.

The Mex() pseudo-builder takes care of the following:
- adding necessary compiler options
- adding the minimal set of necessary linker options (see Usage below)
- automatically adding `mexversion.c` to the source file list (for older Matlab
  versions).

Installation
------------

`matlab.py` depends on
- Python (2.5 or newer)
- SCons (obviously)
- Matlab (the earliest version I tested with is R2007a)

To install, copy the file `site_scons/site_tools/matlab.py` to your projects
`site_scons/site_tools` directory.

Usage
-----

Use this as you would any other SCons extension: add it to the `tools` argument
of Environment(), for example:

------------------
env = Environment(tools = ['default', 'matlab'])
------------------

To compile a Mex source file, use the method Mex(), like so:

------------------
mex_ext = env.Mex("mex_ext", ["mex_ext.c"])
------------------

Mex() takes care of adding necessary compiler options (e.g., `-fexception`) and
linker options (e.g., `-lmx`).

NOTE: Mex() intends to only do the minimal amount of necessary work, that is, it
does not do things that are unnecessary for a minimal Mex file.  For instance,
it links to the smallest possible set of libraries (i.e., mex and mx).
Therefor, if you use Matlab libraries other than mx and mex, you need to link to
them yourself.

NOTE: On first run, Matlab must be started.  The values stored in
`env['MATLAB']` are static per Matlab installation, and are cached.  If you
change your Matlab installation, you can delete the file `.matlab_vars_cache` to
update the information.

Mex() also has an optional argument `only_deps`, which omits the shared library,
but still does everything else.  This is intended for when creating IDE project
files.  For example, to build a MS Visual Studio solution file, you could do the
following:

------------------
mex_ext = env.Mex("mex_ext", ["mex_ext.c", "mex_ext.def"],
                  only_deps=True)

msvs_variant = "Release"

mex_ext_vs = env.MSVSProject("mex_ext" + env['MSVSPROJECTSUFFIX'],
                             ["mex_ext.c", "mex_ext.def"])

MSVSSolution("MexExt", [mex_ext_vs], msvs_variant)
------------------

License
-------

See the file LICENSE.
